create table "public"."ainnotation_usage" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone default now(),
    "user_id" uuid,
    "type" character varying,
    "amount" bigint,
    "file_id" uuid,
    "model" character varying,
    "original_balance" bigint,
    "current_balance" bigint,
    "prompt" character varying,
    "context" character varying
);


alter table "public"."ainnotation_usage" enable row level security;

create table "public"."transactions" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone default now(),
    "user_id" uuid,
    "email" character varying,
    "type" character varying,
    "category" character varying,
    "amount" bigint,
    "current_balance" bigint,
    "previous_balance" bigint,
    "description" character varying,
    "transaction_id" uuid default gen_random_uuid()
);


alter table "public"."transactions" enable row level security;

create table "public"."uploads" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone default now(),
    "user_id" uuid,
    "filename" character varying,
    "file_id" uuid,
    "annotations" json,
    "filesize" bigint,
    "email" character varying
);


alter table "public"."uploads" enable row level security;

create table "public"."users" (
    "id" uuid not null,
    "name" character varying(255),
    "email" character varying(255),
    "referer_code" character varying(255),
    "ainnotation_credit" integer default 50,
    "referred_by" character varying,
    "avatar_url" character varying,
    "full_name" character varying
);


alter table "public"."users" enable row level security;

CREATE UNIQUE INDEX ainnotation_usage_pkey ON public.ainnotation_usage USING btree (id);

CREATE INDEX idx_users_email ON public.users USING btree (email);

CREATE INDEX idx_users_refer_code ON public.users USING btree (referer_code);

CREATE UNIQUE INDEX transactions_pkey ON public.transactions USING btree (id);

CREATE UNIQUE INDEX uploads_pkey ON public.uploads USING btree (id);

CREATE UNIQUE INDEX users_email_key ON public.users USING btree (email);

CREATE UNIQUE INDEX users_pkey ON public.users USING btree (id);

CREATE UNIQUE INDEX users_referer_code_key ON public.users USING btree (referer_code);

alter table "public"."ainnotation_usage" add constraint "ainnotation_usage_pkey" PRIMARY KEY using index "ainnotation_usage_pkey";

alter table "public"."transactions" add constraint "transactions_pkey" PRIMARY KEY using index "transactions_pkey";

alter table "public"."uploads" add constraint "uploads_pkey" PRIMARY KEY using index "uploads_pkey";

alter table "public"."users" add constraint "users_pkey" PRIMARY KEY using index "users_pkey";

alter table "public"."ainnotation_usage" add constraint "ainnotation_usage_user_id_fkey" FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE not valid;

alter table "public"."ainnotation_usage" validate constraint "ainnotation_usage_user_id_fkey";

alter table "public"."transactions" add constraint "transactions_email_fkey" FOREIGN KEY (email) REFERENCES users(email) ON DELETE CASCADE not valid;

alter table "public"."transactions" validate constraint "transactions_email_fkey";

alter table "public"."transactions" add constraint "transactions_user_id_fkey" FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE not valid;

alter table "public"."transactions" validate constraint "transactions_user_id_fkey";

alter table "public"."uploads" add constraint "uploads_email_fkey" FOREIGN KEY (email) REFERENCES users(email) ON DELETE CASCADE not valid;

alter table "public"."uploads" validate constraint "uploads_email_fkey";

alter table "public"."uploads" add constraint "uploads_user_id_fkey" FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE not valid;

alter table "public"."uploads" validate constraint "uploads_user_id_fkey";

alter table "public"."users" add constraint "users_email_key" UNIQUE using index "users_email_key";

alter table "public"."users" add constraint "users_id_fkey" FOREIGN KEY (id) REFERENCES auth.users(id) not valid;

alter table "public"."users" validate constraint "users_id_fkey";

alter table "public"."users" add constraint "users_referer_code_key" UNIQUE using index "users_referer_code_key";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.handle_new_user()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
 SET search_path TO 'public'
AS $function$
begin
  insert into public.users (id,email, referred_by, avatar_url, full_name)
  values (new.id, new.email, new.raw_user_meta_data ->> 'referred_by', new.raw_user_meta_data ->> 'avatar_url', new.raw_user_meta_data ->> 'full_name');
  return new;
end;
$function$
;

create policy "Enable insert for authenticated users only"
on "public"."ainnotation_usage"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable insert for authenticated users only"
on "public"."uploads"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access for all users"
on "public"."uploads"
as permissive
for select
to public
using (true);


create policy "Enable update for users based on email"
on "public"."uploads"
as permissive
for update
to public
using (((auth.jwt() ->> 'email'::text) = (email)::text))
with check (((auth.jwt() ->> 'email'::text) = (email)::text));


create policy "Enable insert for authenticated users only"
on "public"."users"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access for all users"
on "public"."users"
as permissive
for select
to public
using (true);


create policy "Enable update for users based on email"
on "public"."users"
as permissive
for update
to public
using (((auth.jwt() ->> 'email'::text) = (email)::text))
with check (((auth.jwt() ->> 'email'::text) = (email)::text));


CREATE TRIGGER "onSignUp" AFTER INSERT ON public.users FOR EACH ROW EXECUTE FUNCTION supabase_functions.http_request('http://localhost:3000/api/refer', 'POST', '{"Content-type":"application/json"}', '{}', '1000');


