
create table "public"."ainnotation_usage" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone default now(),
    "user_id" uuid,
    "type" character varying,
    "amount" bigint,
    "file_id" uuid,
    "model" character varying,
    "original_balance" bigint,
    "current_balance" bigint,
    "prompt" character varying,
    "context" character varying,
    "response" text
);


alter table "public"."ainnotation_usage" enable row level security;

create table "public"."orders" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "order_id" character varying,
    "email" character varying,
    "product" jsonb,
    "user_id" uuid,
    "status" text default 'pending'::text,
    "merchant" jsonb,
    "payment_method" text,
    "real_payment_amount" double precision
);


alter table "public"."orders" enable row level security;

create table "public"."referrals" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "referer_id" uuid,
    "referer_email" character varying,
    "referee_id" uuid,
    "referee_email" character varying,
    "referral_type" text,
    "referral_amount" bigint,
    "initial_bonus" boolean default false
);


alter table "public"."referrals" enable row level security;

create table "public"."transactions" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone default now(),
    "user_id" uuid,
    "email" character varying,
    "type" character varying,
    "category" character varying,
    "amount" bigint,
    "description" character varying,
    "transaction_id" uuid default gen_random_uuid()
);


alter table "public"."transactions" enable row level security;

create table "public"."uploads" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone default now(),
    "user_id" uuid,
    "filename" character varying,
    "file_id" uuid,
    "annotations" json,
    "filesize" bigint,
    "email" character varying
);


alter table "public"."uploads" enable row level security;

create table "public"."users" (
    "id" uuid not null,
    "name" character varying(255),
    "email" character varying(255),
    "referer_code" character varying(255),
    "ainnotation_credit" integer default 50,
    "referred_by" character varying,
    "avatar_url" character varying,
    "full_name" character varying,
    "refer_tracked" boolean default false
);


alter table "public"."users" enable row level security;

CREATE UNIQUE INDEX ainnotation_usage_pkey ON public.ainnotation_usage USING btree (id);

CREATE INDEX idx_users_email ON public.users USING btree (email);

CREATE INDEX idx_users_refer_code ON public.users USING btree (referer_code);

CREATE UNIQUE INDEX orders_pkey ON public.orders USING btree (id);

CREATE UNIQUE INDEX referrals_pkey ON public.referrals USING btree (id);

CREATE UNIQUE INDEX transactions_pkey ON public.transactions USING btree (id);

CREATE UNIQUE INDEX uploads_pkey ON public.uploads USING btree (id);

CREATE UNIQUE INDEX users_email_key ON public.users USING btree (email);

CREATE UNIQUE INDEX users_pkey ON public.users USING btree (id);

CREATE UNIQUE INDEX users_referer_code_key ON public.users USING btree (referer_code);

alter table "public"."ainnotation_usage" add constraint "ainnotation_usage_pkey" PRIMARY KEY using index "ainnotation_usage_pkey";

alter table "public"."orders" add constraint "orders_pkey" PRIMARY KEY using index "orders_pkey";

alter table "public"."referrals" add constraint "referrals_pkey" PRIMARY KEY using index "referrals_pkey";

alter table "public"."transactions" add constraint "transactions_pkey" PRIMARY KEY using index "transactions_pkey";

alter table "public"."uploads" add constraint "uploads_pkey" PRIMARY KEY using index "uploads_pkey";

alter table "public"."users" add constraint "users_pkey" PRIMARY KEY using index "users_pkey";

alter table "public"."ainnotation_usage" add constraint "ainnotation_usage_user_id_fkey" FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE not valid;

alter table "public"."ainnotation_usage" validate constraint "ainnotation_usage_user_id_fkey";

alter table "public"."orders" add constraint "orders_user_id_fkey" FOREIGN KEY (user_id) REFERENCES users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."orders" validate constraint "orders_user_id_fkey";

alter table "public"."referrals" add constraint "referrals_referee_email_fkey" FOREIGN KEY (referee_email) REFERENCES users(email) not valid;

alter table "public"."referrals" validate constraint "referrals_referee_email_fkey";

alter table "public"."referrals" add constraint "referrals_referee_id_fkey" FOREIGN KEY (referee_id) REFERENCES users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."referrals" validate constraint "referrals_referee_id_fkey";

alter table "public"."referrals" add constraint "referrals_referer_email_fkey" FOREIGN KEY (referer_email) REFERENCES users(email) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."referrals" validate constraint "referrals_referer_email_fkey";

alter table "public"."referrals" add constraint "referrals_referer_id_fkey" FOREIGN KEY (referer_id) REFERENCES users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."referrals" validate constraint "referrals_referer_id_fkey";

alter table "public"."transactions" add constraint "transactions_email_fkey" FOREIGN KEY (email) REFERENCES users(email) ON DELETE CASCADE not valid;

alter table "public"."transactions" validate constraint "transactions_email_fkey";

alter table "public"."transactions" add constraint "transactions_user_id_fkey" FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE not valid;

alter table "public"."transactions" validate constraint "transactions_user_id_fkey";

alter table "public"."uploads" add constraint "uploads_email_fkey" FOREIGN KEY (email) REFERENCES users(email) ON DELETE CASCADE not valid;

alter table "public"."uploads" validate constraint "uploads_email_fkey";

alter table "public"."uploads" add constraint "uploads_user_id_fkey" FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE not valid;

alter table "public"."uploads" validate constraint "uploads_user_id_fkey";

alter table "public"."users" add constraint "users_email_key" UNIQUE using index "users_email_key";

alter table "public"."users" add constraint "users_id_fkey" FOREIGN KEY (id) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."users" validate constraint "users_id_fkey";

alter table "public"."users" add constraint "users_referer_code_key" UNIQUE using index "users_referer_code_key";

set check_function_bodies = off;



grant delete on table "public"."ainnotation_usage" to "anon";

grant insert on table "public"."ainnotation_usage" to "anon";

grant references on table "public"."ainnotation_usage" to "anon";

grant select on table "public"."ainnotation_usage" to "anon";

grant trigger on table "public"."ainnotation_usage" to "anon";

grant truncate on table "public"."ainnotation_usage" to "anon";

grant update on table "public"."ainnotation_usage" to "anon";

grant delete on table "public"."ainnotation_usage" to "authenticated";

grant insert on table "public"."ainnotation_usage" to "authenticated";

grant references on table "public"."ainnotation_usage" to "authenticated";

grant select on table "public"."ainnotation_usage" to "authenticated";

grant trigger on table "public"."ainnotation_usage" to "authenticated";

grant truncate on table "public"."ainnotation_usage" to "authenticated";

grant update on table "public"."ainnotation_usage" to "authenticated";

grant delete on table "public"."ainnotation_usage" to "service_role";

grant insert on table "public"."ainnotation_usage" to "service_role";

grant references on table "public"."ainnotation_usage" to "service_role";

grant select on table "public"."ainnotation_usage" to "service_role";

grant trigger on table "public"."ainnotation_usage" to "service_role";

grant truncate on table "public"."ainnotation_usage" to "service_role";

grant update on table "public"."ainnotation_usage" to "service_role";

grant delete on table "public"."orders" to "anon";

grant insert on table "public"."orders" to "anon";

grant references on table "public"."orders" to "anon";

grant select on table "public"."orders" to "anon";

grant trigger on table "public"."orders" to "anon";

grant truncate on table "public"."orders" to "anon";

grant update on table "public"."orders" to "anon";

grant delete on table "public"."orders" to "authenticated";

grant insert on table "public"."orders" to "authenticated";

grant references on table "public"."orders" to "authenticated";

grant select on table "public"."orders" to "authenticated";

grant trigger on table "public"."orders" to "authenticated";

grant truncate on table "public"."orders" to "authenticated";

grant update on table "public"."orders" to "authenticated";

grant delete on table "public"."orders" to "service_role";

grant insert on table "public"."orders" to "service_role";

grant references on table "public"."orders" to "service_role";

grant select on table "public"."orders" to "service_role";

grant trigger on table "public"."orders" to "service_role";

grant truncate on table "public"."orders" to "service_role";

grant update on table "public"."orders" to "service_role";

grant delete on table "public"."referrals" to "anon";

grant insert on table "public"."referrals" to "anon";

grant references on table "public"."referrals" to "anon";

grant select on table "public"."referrals" to "anon";

grant trigger on table "public"."referrals" to "anon";

grant truncate on table "public"."referrals" to "anon";

grant update on table "public"."referrals" to "anon";

grant delete on table "public"."referrals" to "authenticated";

grant insert on table "public"."referrals" to "authenticated";

grant references on table "public"."referrals" to "authenticated";

grant select on table "public"."referrals" to "authenticated";

grant trigger on table "public"."referrals" to "authenticated";

grant truncate on table "public"."referrals" to "authenticated";

grant update on table "public"."referrals" to "authenticated";

grant delete on table "public"."referrals" to "service_role";

grant insert on table "public"."referrals" to "service_role";

grant references on table "public"."referrals" to "service_role";

grant select on table "public"."referrals" to "service_role";

grant trigger on table "public"."referrals" to "service_role";

grant truncate on table "public"."referrals" to "service_role";

grant update on table "public"."referrals" to "service_role";

grant delete on table "public"."transactions" to "anon";

grant insert on table "public"."transactions" to "anon";

grant references on table "public"."transactions" to "anon";

grant select on table "public"."transactions" to "anon";

grant trigger on table "public"."transactions" to "anon";

grant truncate on table "public"."transactions" to "anon";

grant update on table "public"."transactions" to "anon";

grant delete on table "public"."transactions" to "authenticated";

grant insert on table "public"."transactions" to "authenticated";

grant references on table "public"."transactions" to "authenticated";

grant select on table "public"."transactions" to "authenticated";

grant trigger on table "public"."transactions" to "authenticated";

grant truncate on table "public"."transactions" to "authenticated";

grant update on table "public"."transactions" to "authenticated";

grant delete on table "public"."transactions" to "service_role";

grant insert on table "public"."transactions" to "service_role";

grant references on table "public"."transactions" to "service_role";

grant select on table "public"."transactions" to "service_role";

grant trigger on table "public"."transactions" to "service_role";

grant truncate on table "public"."transactions" to "service_role";

grant update on table "public"."transactions" to "service_role";

grant delete on table "public"."uploads" to "anon";

grant insert on table "public"."uploads" to "anon";

grant references on table "public"."uploads" to "anon";

grant select on table "public"."uploads" to "anon";

grant trigger on table "public"."uploads" to "anon";

grant truncate on table "public"."uploads" to "anon";

grant update on table "public"."uploads" to "anon";

grant delete on table "public"."uploads" to "authenticated";

grant insert on table "public"."uploads" to "authenticated";

grant references on table "public"."uploads" to "authenticated";

grant select on table "public"."uploads" to "authenticated";

grant trigger on table "public"."uploads" to "authenticated";

grant truncate on table "public"."uploads" to "authenticated";

grant update on table "public"."uploads" to "authenticated";

grant delete on table "public"."uploads" to "service_role";

grant insert on table "public"."uploads" to "service_role";

grant references on table "public"."uploads" to "service_role";

grant select on table "public"."uploads" to "service_role";

grant trigger on table "public"."uploads" to "service_role";

grant truncate on table "public"."uploads" to "service_role";

grant update on table "public"."uploads" to "service_role";

grant delete on table "public"."users" to "anon";

grant insert on table "public"."users" to "anon";

grant references on table "public"."users" to "anon";

grant select on table "public"."users" to "anon";

grant trigger on table "public"."users" to "anon";

grant truncate on table "public"."users" to "anon";

grant update on table "public"."users" to "anon";

grant delete on table "public"."users" to "authenticated";

grant insert on table "public"."users" to "authenticated";

grant references on table "public"."users" to "authenticated";

grant select on table "public"."users" to "authenticated";

grant trigger on table "public"."users" to "authenticated";

grant truncate on table "public"."users" to "authenticated";

grant update on table "public"."users" to "authenticated";

grant delete on table "public"."users" to "service_role";

grant insert on table "public"."users" to "service_role";

grant references on table "public"."users" to "service_role";

grant select on table "public"."users" to "service_role";

grant trigger on table "public"."users" to "service_role";

grant truncate on table "public"."users" to "service_role";

grant update on table "public"."users" to "service_role";

create policy "Enable insert for authenticated users only"
on "public"."ainnotation_usage"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access for all users"
on "public"."ainnotation_usage"
as permissive
for select
to public
using (true);


create policy "Enable insert for authenticated users only"
on "public"."orders"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access for all users"
on "public"."orders"
as permissive
for select
to public
using (true);


create policy "Enable update for users based on email"
on "public"."orders"
as permissive
for update
to public
using (((auth.jwt() ->> 'email'::text) = (email)::text))
with check (((auth.jwt() ->> 'email'::text) = (email)::text));


create policy "Enable insert for authenticated users only"
on "public"."referrals"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access for all users"
on "public"."referrals"
as permissive
for select
to public
using (true);


create policy "Enable insert for authenticated users only"
on "public"."transactions"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access for all users"
on "public"."transactions"
as permissive
for select
to public
using (true);


create policy "Enable insert for authenticated users only"
on "public"."uploads"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access for all users"
on "public"."uploads"
as permissive
for select
to public
using (true);


create policy "Enable update for users based on email"
on "public"."uploads"
as permissive
for update
to public
using (((auth.jwt() ->> 'email'::text) = (email)::text))
with check (((auth.jwt() ->> 'email'::text) = (email)::text));


create policy "Enable insert for authenticated users only"
on "public"."users"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access for all users"
on "public"."users"
as permissive
for select
to public
using (true);


create policy "Enable update for users based on email"
on "public"."users"
as permissive
for update
to public
using (((auth.jwt() ->> 'email'::text) = (email)::text))
with check (((auth.jwt() ->> 'email'::text) = (email)::text));


-- CREATE TRIGGER on_signup AFTER INSERT ON public.users FOR EACH ROW EXECUTE FUNCTION supabase_functions.http_request('http://192.168.1.13:3000/api/refer', 'POST', '{"Content-type":"application/json","x-credential":"0d00Onani"}', '{}', '1000');
